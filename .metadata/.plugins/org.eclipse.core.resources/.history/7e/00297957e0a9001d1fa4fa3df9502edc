package com.webchat.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.webchat.controllers.models.Message;
import com.webchat.controllers.models.ResponseObject;
import com.webchat.repositories.MessageReponsitory;

@RestController
@RequestMapping(path = "/api/message") // Request mapping: Ánh xạ các request
public class MessageController {
	// DI = Dependency Injection
	@Autowired
	private MessageReponsitory reponsitory;

	@GetMapping("")
	// This is request: http://localhost:8080/api/message
	List<Message> getAllMessage() {
		// Where is data?
		return reponsitory.findAll();
	}

	@GetMapping("/{id}")
	// Let's return an object with: data, message, status
	// Optional: "May be null"
	ResponseEntity<ResponseObject> findById(@PathVariable Long id) {
		Optional<Message> foundMessage = reponsitory.findById(id);

		// Check foundMessage is not NULL
		return foundMessage.isPresent()
				? ResponseEntity.status(HttpStatus.OK)
						.body(new ResponseObject("ok", "Query message successfully", foundMessage))
				: ResponseEntity.status(HttpStatus.NOT_FOUND)
						.body(new ResponseObject("false", "Cannot find message with id = " + id, ""));

	}
}
